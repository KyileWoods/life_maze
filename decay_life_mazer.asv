%Open up a maze, with walls designated as ones and zeroes
close all
clear all
tic

%Larger


%%Gordan Ramsey maze
%maze = imread('gordan.jpg');
%%The values below are the Chosen start and end co-odinate for 'gordan'.
% start_x = 220;
% start_y = 580;
% end_x = 650;
% end_y = 600;


% %Large square maze
% maze = imread('simple_maze.png');
% %Working start-end points for 'maze.png' only
% start_x = 153;
% start_y =1;
% end_x = 171;
% end_y = 321;

%Massive maze
maze = imread('larger.png');
%Working start-end points for larger.png only
start_x = 2;
start_y =1;
end_x = 5768;
end_y = 5769;

hsvmaze = rgb2hsv(maze);
binmaze = hsvmaze(:,:,3) >= 0.3;
imshow(binmaze)

%Fill the entire passageways with life
A = binmaze==0;    %Perhaps call this "A" from the start, since "lifepath" is never operated on
handle = imshow(A, 'InitialMagnification', 100); % save the handle for when we want to update the image later
drawnow
%% Initialisation
%%
i=0;
%%
close all

mapdim = size(A);
R = mapdim(1);  % number of rows
C = mapdim(2);  % number of columns

north = [R,1:R-1];     % indices of north neighbour
south = [2:R,1];       % indices of south neighbour
west  = [C,1:C-1];     % indices of west neighbour
east  = [2:C,1];       % indices of east neighbour

% Show the starting frame in the animation
set(figure, 'Visible', 'on');
showmaze = imshow(A, 'InitialMagnification', 'Fit')

%% Simulation
fulltime=tic
done = false;
while done == false 
    Looptime = tic;
    i=i+1
    B=A; %store a copy of the 'old" maze"
    
    % Count how many of the cells on each cardinal corner are dead cells
        
    NE_corner_condition = A(north, :)+ A(:, east) + A(north,east);
    NW_corner_condition = A(north, :)+ A(:, west) + A(north,west);
    SE_corner_condition = A(south, :)+ A(:, east) + A(south,east);
    SW_corner_condition = A(south, :)+ A(:, west) + A(south,west);
    
    %Test whether the cell forms a line or corner
        is_an_outside_corner =(A==false) & (...
     (A(south,:)==true &A(:, west)==true & A(south,west)==true )  ...     %     n 1 1
    |(A(south, :)==true & A(:, east) ==true & A(south,east)==true)...     %     n 0 1   <--Some rotation of this
    |(A(north, :)==true & A(:, west)==true & A(north,west)==true)...      %     n n n    
    |(A(north, :)==true & A(:, east)==true & A(north,east)==true));
    
        
        is_an_inside_corner =  (A==false)&(...
      (A(south, :)==false & A(:, west)==false & A(south,west)==true)  ...    %     n n n
    | (A(south, :)==false & A(:, east) ==false & A(south,east)==true)...     %     0 0 n   <--Some rotation of this
    | (A(north, :)==false & A(:, west)==false & A(north,west)==true)...      %     1 0 n 
    | (A(north, :)==false & A(:, east)==false & A(north,east)==true))...
    & ( NE_corner_condition == 3 |  NW_corner_condition ==3 |  SE_corner_condition ==3 |  SW_corner_condition==3);
                                                                                
                          
          is_line =  (A==false)&(...
      (A(south, :)==false & (A(north, :)==false | A(north, east) ==false | A(north, west)==false)) ... %   n n n
    | (A(:, west))==false & (A(:, east) ==false | A(north, east)==false | A(south, east)==false)) ...  %   0 0 0   <--Some rotation of this
    | (A(north, west)==false & A(south, east)==false) ...                                              %   n n n 
    | (A(north, east)==false  & A(south, west)==false);
                                                         
     
    %These three rules determine whether or not the cells should die.
    should_die = ((is_an_outside_corner == true) &  (is_an_inside_corner==false))  & (is_line==false);%| is_single;

    A = logical(A + should_die);
    A(start_y,start_x)=false;
    A(end_y,end_x)=false;
    
    % Uncomment to see Gordan Ramsey's face melting
    if i<110 %
      showmaze.CData = A;
      drawnow
      toc(Looptime)
    elseif mod(i,100)==0
      showmaze.CData = A;   
      drawnow
      toc(Looptime)
      save('large_maze.mat');
    end
%     
    if all(B==A)
        done=true;
    end
    
end 
% %Simulation endinging conditions report
toc(fulltime)
i
save('large_maze.mat');
%This is estimated to have taken 8,158 iterations!
%Create a red path
%%
pathline = 255.*(uint8(~A));
%imshow(pathline)
tracedmaze=maze;
tracedmaze(:, :, 2:3)=tracedmaze(:, :, 2:3)-pathline;
%tracedmaze(:,:,1)=maze(:,:,1)+pathline

   imagesc(tracedmaze)

%% This function is the means by which we can intercept a keypress from the user, to stop the loop
% function KeyPressed(~, ~)
%     % This function is called by MATLAB automatically, whenever the user presses a key in the Figure window.
%     % It tells our "while" loop that we're done.
%     evalin('base', 'done = true;') % there's a much cleaner way to do this if your M-file is a function, rather than a script
% end

%% About "while" loops
% A while loop is an alternative to a for loop. Rather than looping for a
% fixed number of steps (which is what a for loop does), a while loop
% continues "while" some condition holds.  In this file, we continue looping 
% "while not done".
% The logical variable "done" is set to false initially, and only set to 
% true when the user presses any key in the figure window.